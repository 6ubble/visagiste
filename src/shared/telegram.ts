import { SERVICE_TYPES } from '../components/OrderForm/constants'

// –¢–∏–ø—ã
export interface OrderFormData {
  name: string
  phone: string
  serviceType: string
  preferredDate: string
  preferredTime: string
  description?: string
}

interface TelegramResponse {
  ok: boolean
  result?: unknown
  error_code?: number
  description?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç "—á–∏—Å–ª–æ –º–µ—Å—è—Ü"
const formatDate = (dateString: string): string => {
  if (!dateString) return ''
  
  const date = new Date(dateString)
  const day = date.getDate()
  const month = date.toLocaleDateString('ru-RU', { month: 'long' })
  
  return `${day} ${month}`
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
export const TELEGRAM_CONFIG = {
  CHAT_ID: import.meta.env.VITE_TELEGRAM_CHAT_ID,
  BOT_TOKEN: import.meta.env.VITE_TELEGRAM_BOT_TOKEN,
  API_URL: 'https://api.telegram.org/bot',
  
  MESSAGE_TEMPLATE: (data: { name: string; phone: string; serviceType: string; preferredDate: string; preferredTime: string; description?: string }) => `
üíÑ *–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨ –ù–ê –ü–†–û–¶–ï–î–£–†–£*

üë§ *–ò–º—è:* ${data.name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}
üíÖ *–¢–∏–ø —É—Å–ª—É–≥–∏:* ${data.serviceType}
üìÖ *–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞:* ${formatDate(data.preferredDate)}
üïê *–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:* ${data.preferredTime}
üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:* ${data.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
  `.trim()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL API
export const getTelegramApiUrl = () => {
  return `${TELEGRAM_CONFIG.API_URL}${TELEGRAM_CONFIG.BOT_TOKEN}`
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
export const isTelegramConfigured = () => {
  return Boolean(TELEGRAM_CONFIG.CHAT_ID && TELEGRAM_CONFIG.BOT_TOKEN)
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
export class TelegramService {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
  private static getServiceTypeName(serviceTypeId: string): string {
    const service = SERVICE_TYPES.find(s => s.id === serviceTypeId)
    return service ? service.name : serviceTypeId
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram
  static async sendOrder(orderData: OrderFormData): Promise<{ success: boolean; message: string }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      if (!isTelegramConfigured()) {
        throw new Error('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞.')
      }

      // –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
      const serviceTypeName = this.getServiceTypeName(orderData.serviceType)

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É—Å–ª—É–≥–∏
      const message = TELEGRAM_CONFIG.MESSAGE_TEMPLATE({
        ...orderData,
        serviceType: serviceTypeName
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
      if (message.length > 4000) {
        throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.')
      }

      // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      const requestBody = {
        chat_id: TELEGRAM_CONFIG.CHAT_ID,
        text: message,
        parse_mode: 'Markdown'
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API
      const response = await fetch(`${getTelegramApiUrl()}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        if (response.status === 400) {
          throw new Error(`–û—à–∏–±–∫–∞ 400: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Chat ID –∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.`)
        } else if (response.status === 401) {
          throw new Error(`–û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.`)
        } else if (response.status === 403) {
          throw new Error(`–û—à–∏–±–∫–∞ 403: –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É.`)
        } else if (response.status === 404) {
          throw new Error(`–û—à–∏–±–∫–∞ 404: –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
        } else {
          throw new Error(`HTTP –æ—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`)
        }
      }

      const result: TelegramResponse = await response.json()

      if (!result.ok) {
        throw new Error(`Telegram API –æ—à–∏–±–∫–∞ ${result.error_code}: ${result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
      }

      return {
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.'
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error)
      
      return {
        success: false,
        message: error instanceof Error 
          ? `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}` 
          : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
  static async checkBotStatus(): Promise<boolean> {
    try {
      if (!isTelegramConfigured()) {
        return false
      }

      const response = await fetch(`${getTelegramApiUrl()}/getMe`)
      const result: TelegramResponse = await response.json()
      
      return result.ok
    } catch {
      return false
    }
  }
}